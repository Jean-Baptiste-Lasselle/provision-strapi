version: '3'

services:
# TODO :  rajouter le service NGINX pour servir toutes les URLs, 
# TODO : faire la recette terraform / ansible pour provisionner la configuration du serveur DNS dans une VM dédiée, différente de l'hôte Docker, et la configuration du serveur DNS de la machine utilisée pour tester strapi, avec un Firefox / mozilla. 

  bootstrapi:
    # image: boot/bootiestrapi:v1.0.0
    build: 
      context: ./build-img-docker/all-in-one/
    environment:
      - APP_NAME=instance-bootstrapi
      - DATABASE_CLIENT=mongo
      - DATABASE_HOST=db
      - DATABASE_PORT=27017
      - DATABASE_NAME=bootstrapi_db
      - DATABASE_USERNAME=
      - DATABASE_PASSWORD=
      - HOST=localhost
      # numéro de version de publication dans le registry NPM privé, via "prebootstrapi" (qui deviendra un Jenkins Pipeline)
      - NUMERO_VERSION_BOOTSTRAPI=1.0.0
    ports:
      - 1337:1337
#    volumes:
      #- ./strapi-app:/usr/src/api/strapi-app
      #- /usr/src/api/strapi-app/node_modules
    environment: # je préfèrerai que cette URL soit chargée dynamiquement, avec la provision Terraform / Ansible de l'instance marguerite Gitlab
      - URI_PRIVATE_NPM_REGISTRY=http://marguerite_npm:5984/registry/_design/app/_rewrite
    depends_on:
      # Je ne fais plus de dépendance entre bootstrapi et marguerite, gérée par docker-compose, mais je voudrai à l'avenir que cette
      # dépendance soit gérée par ansible / terraform. Ansible utilisera les HEALTHCHECK pour attendre que le conteneur build_strapi ait
      # bien réalisé le build / publish (vers le registry privé NPM) avec succès, avant de lancer le docker-compose up bootstrapi 
      # - build_bootstrapi
      - bdd_strapi
    restart: always
  bdd_strapi:
    image: mongo
    environment:
      - MONGO_INITDB_DATABASE=bootstrapi
    ports:
      - 27017:27017
    volumes:
      - ./db:./donnees/strapi/db
    restart: always
